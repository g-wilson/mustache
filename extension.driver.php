<?php

require_once(EXTENSIONS . '/mustache/lib/Mustache/Autoloader.php');
Mustache_Autoloader::register();

class extension_Mustache extends Extension {

  public function getSubscribedDelegates() {
    return array(
      array(
        'page'     => '/frontend/',
        'delegate' => 'FrontendOutputPreGenerate',
        'callback' => 'buildPage'
      ),        
      array(
        'page'     => '/frontend/',
        'delegate' => 'FrontendOutputPostGenerate',
        'callback' => 'replaceOutput'
      ),
    );
  }

  /**
   * Installation
   */
  public function install() {
    $cachedir = MANIFEST . '/cache/mustache';
    if (!is_dir($cachedir)) mkdir($cachedir, 0755, true);
    $templatedir = WORKSPACE . '/mustache/';
    if (!is_dir($templatedir)) {
      mkdir($templatedir . 'pages', 0755, true);
      mkdir($templatedir . 'partials', 0755, true);
    }
  }

  // String - Cache of the final page output
  private static $output;

  // Array - Cache of the meta information about the Page object
  private static $pageMeta;

  // Boolean of whether this Page should be rendered with Mustache
  public static $pageIsMustache;

  /**
   * Renders a page with Mustache if it is of the right page type
   *
   * @param array $context Array containing the Page object, its XML and its XSL
   */
  public function buildPage(&$context) {

    // Page data + meta // Cache it so the other delegate has access to page data
    self::$pageMeta = $context['page']->pageData();
    self::$pageIsMustache = General::in_iarray('mustache', self::$pageMeta['type']);
    if (!self::$pageIsMustache) return;

    // Convert the XML to an array
    $xml = $context['xml'];
    $json = json_encode(simplexml_load_string($xml), JSON_PRETTY_PRINT);
    $pageData = json_decode($json, true);

    // Mustache config
    $config = array(
      'template_class_prefix' => '__SymphonyMustache_',
      'cache' => MANIFEST . '/cache/mustache',
      'cache_file_mode' => 0755,
      'cache_lambda_templates' => true,
      'loader' => new Mustache_Loader_FilesystemLoader(WORKSPACE . '/mustache/pages'),
      'partials_loader' => new Mustache_Loader_FilesystemLoader(WORKSPACE . '/mustache/partials'),
      'escape' => function($value) {
        return htmlspecialchars($value, ENT_COMPAT, 'UTF-8');
      },
      'charset' => 'UTF-8',
      'logger' => new Mustache_Logger_StreamLogger('php://stderr'),
      'strict_callables' => true,
      );

    // Render template
    $m = new Mustache_Engine($config);
    $tpl = $m->loadTemplate(self::$pageMeta['handle']);
    self::$output = $tpl->render($pageData);

    // Put the page data as json in place of the xml so the debug devkit can see it
    $context['xml'] = $json;
  }

  /**
   * Replaces the frontend page output to that generated by the Mustache engine
   *
   * @param array $context Array containing the standard page output as a string
   */
  public function replaceOutput(&$context) {
    if (self::$pageIsMustache) {
      $context['output'] = self::$output;
    }
  }

}